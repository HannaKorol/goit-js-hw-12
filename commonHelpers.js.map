{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["/* Підключення бібліотеки axios - є це простий HTTP-клієнт, що базується на Promise і автоматизує багато рутинних завдань при роботі з HTTP-запитами, а саме дозволяє:\n- зберігати глобальні налаштування, що будуть автоматично додаватися до всіх запитів;\n- автоматично перетворювати дані запиту у формат JSON;\n- парсити дані відповіді з формату JSON;\n- обробляти всі можливі помилки запиту, включаючи 404, та багато іншого.\n- Axios є зручною альтернативою стандартному Fetch API.\n */\nimport axios from 'axios';   \n\nconst URL = \"https://pixabay.com/api/\";                  // шлях до галереї pixabay\nconst API_KEY = \"45296804-0fb55f0e1381bd4cbf585a7a5\";    // ключ що отрімала після реєстрації тут https://pixabay.com/api/docs/#api_search_images\n\naxios.defaults.baseURL = URL;\n\n// Робимо запит на сервер для пошуку колекції картинок\nexport async function fetchImages(query, page = 1) {      \n    const params = {\n        key: API_KEY,\n        q: query,\n        image_type: \"photo\",\n        orientation: \"horizontal\",\n        safesearch: true,\n        pageSize: 15,                                     // pageSize замінює per_Page для цієї галереї\n        page: page,                                            \n    };\n\ntry {\n    const response = await axios.get(URL, {params});      \n    return response.data;\n} catch(error) {\n    console.error(\"Image Search Error:\", error);\n    throw error;\n}\n};","/* import { sortUserPlugins } from \"vite\"; */\n// Додай відображення великої версії зображення з бібліотекою SimpleLightbox для повноцінної галереї.\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst galleryList = document.querySelector(\".gallery-list\");\n\n//Відмальовка знайденої кожної картинки за цією розміткою \nexport function renderImages(images) {\n    const markup = images\n    .map(({                         //Кожне зображення описується об'єктом, з такими властивостями.\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n    })=> `\n    <li>\n    <a href=\"${largeImageURL}\">\n        <img src=\"${webformatURL}\" alt=\"${tags}\"/>\n        </a>\n        <div class=\"text-wrapper\">\n    <div class=\"stat\"><p><b>Likes:</b> ${likes}</p></div>\n    <div class=\"stat\"><p><b>Views:</b> ${views}</p> </div>\n    <div class=\"stat\"><p><b>Comments:</b> ${comments}</p></div>\n    <div class=\"stat\"><p><b>Downloads:</b> ${downloads}</p></div>\n        </div>\n    </li>\n    `\n) \n.join('');\n\ngalleryList.insertAdjacentHTML(\"beforeend\", markup);\n\nnew SimpleLightbox ('.gallery-list a', {\n    captionsData:\"alt\",\n    captionsDelay: 250\n}).refresh();\n}\n\nexport function clearGallery() {\n    galleryList.innerHTML = '';\n}\n\nexport function showLoader() {\n    document.querySelector('.loader').classList.remove('hidden');\n  }\n  \n  export function hideLoader() {\n    document.querySelector('.loader').classList.add('hidden');\n  }\n\n\n","import {fetchImages} from './js/pixabay-api.js';\nimport {\n  renderImages,\n  clearGallery,\n  showLoader,\n  hideLoader, \n} from './js/render-functions.js';\n// Підключення бібліотеки для повідомлень - помилки, закінчення колекції\nimport iziToast from \"izitoast\";\n// стилі для повідомлень\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst loadMoreBtn = document.querySelector('[data-action=\"load-more\"]');\n\n\n// 2) Користувач буде вводити рядок для пошуку в текстове поле, а за сабмітом форми необхідно виконувати HTTP-запит із цим пошуковим рядком.\nconst form = document.querySelector(\".form-search\");\nlet query = '';\nlet page = 1;\nlet maxPages = 0;\n\n\nform.addEventListener(\"submit\", async event => {\n    event.preventDefault();\n    //Обробка тексту що було введено користувачем в форму :\nquery = event.currentTarget.elements.query.value.trim();\npage = 1;\n\n    // 3) При натисканні на кнопку відправки форми, додайте перевірку вмісту текстового поля на наявність порожнього рядка, щоб користувач не міг відправити запит, якщо поле пошуку порожнє.\n    if(!query) {                           //якщо немає тексту в input то:\n        iziToast.error({                   // показувати помилку (використаємо бібліотеку iziToast):\n            message: 'Please enter a search query!',  //текст помилки\n            position: 'topRight',                     // його положення\n        });\n        return;\n    }\n\n\nclearGallery();                                   \nshowLoader();\nloadMoreBtn.classList.add('hidden');\n\ntry {\n  const data = await fetchImages(query, page);\nmaxPages = data.maxpages;\n\n\n  if(data.hits.length === 0) { //Якщо масив hits порожній, відображається повідомлення про те, що зображень не знайдено.\n        iziToast.error({\nmessage: \n\"Sorry, there are no images matching your search query. Please try again!\",\nposition: 'topRight',\n        });\n    } else {\n        renderImages(data.hits); // Якщо ж зображення знайдено, вони рендеряться за допомогою функції renderImages.\n\n    if (data.hits.length < 15 || maxPages <= 15) {  // якщо картинок менше 15 то виводимо повідомлення що їх більше немає\n      iziToast.info({\nmessage: \"We're sorry, but you've reached the end of search results.\",\nposition: 'topRight',\n});\n} else {\n  loadMoreBtn.classList.remove('hidden');  // ховаємо кнопку так як картиннок для відобрадення більше немає\n}\n      }\n} catch(error) {\n  iziToast.error({ title: 'Error', message: error.message }); //якщо виникають помилки запиту - відображаємо за допомогою бібліотеки\n} finally {\n  hideLoader();                                               // під кінець ховаємо \"загрузчика\"\n  form.reset();                                               //очищаємо форму після зробленого запиту користувачем\n}\n});\n\n\n\n//---------------------------------------------------------------------------------------------------------//\n//^     Кнопка \"завантажити ще\"\n\n//1. Якщо данних немає - то і кнопки не має.\n//2. Якщо користувач вже натиснув на кнопку, то спочатку повинні загрузитись данні, а тоді можна клікнути ще раз. Користувач не може клікати 1000разів.\n//3. Якщо дійшли до кінця галереї то кнопку треба видалити.\n\n\n/*\n1. блокуємо кнопку\n2. додаємо до сторінки +1\n3. робимо запит\n4. отримаємо відповідь та візуалізуємо карточки\n5. після запиту робимо перевірку: якщо поточна сторінка співпадає з максимальною - то ховаємо кнопку і знімаємо слухача подій, якщо ж все ок - розблоковуємо кнопку для подальшої взаємодії\n\n*/\n\nloadMoreBtn.addEventListener(\"click\", async () =>{         //якщо натиснули на Кнопку \"завантажити ще\" то відображається ще одна нова сторінка\n  page+=1;\n  showLoader();\n\n  try{\n    const data = await fetchImages(query, page);              \n    if (data.hits.length === 0 || page * 15 >= maxPages) {\n      iziToast.info({\n        message: \"We're sorry, but you've reached the end of search results.\",\n        position: 'topRight',\n      });\n      loadMoreBtn.classList.add('hidden');\n    }\n  renderImages(data.hits);\n  smoothScroll();\n  } catch(error) {\n    iziToast.error({ title: 'Error', message: error.message });\n  } finally {\n    hideLoader();\n  }\n});\n\n\n\nfunction smoothScroll() {\n  const { height: cardHeight } = document\n  .querySelector('.gallery-list')\n  .firstElementChild.getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//Пагінація: номер групи та кількість елементів в групі\n// - Завантажуємо галерею при сабміті форми\n// - Завантажуємо галерею при натискані на кнопку заватажити ще\n// - Оновлюємо групу в параментрах запиту\n// - Рендерим галерею\n// - Скидання значення при пошуку за новим критерієм\n// - Показуємо спінер поки йде запит\n\n\n//створюємо обект де зберігаємо данні(page, perPage, q, maxPage)\n\n// 1. сховати кнопку \"завантажити ще\"\n// 2. вішає\n\n\n//load more btn stages \n// 1. hidden - ховаємо кнопку коли скінчилися результати сторінок, або коли їх взагалі немає, або ми перший раз на сторінці\n// 2. visible - коли робимо новий запит\n// 3. disable - відключаємо тоді коли робимо запит на сервер і чекаємо відповіді від нього\n// 4. enabled - включаемо кнопку тоді коли отримали результати запиту\n\n/* const loadMoreBtn = document.querySelector('[data-action=\"load-more\"]');\nconst spinner = document.querySelector(\".spinner\");\nconst hiddenClass = \"is-hidden\"; //функція для приховання кнопки\n\nclass ButtonService{\nconstructor(buttonEL, hiddenClass) {\n  this.buttonEL = buttonEL;\n  this.hiddenClass = hiddenClass;\n}\nhide(){\n  this.buttonEL.classList.add(this.hiddenClass);\n}\nshow(){\n  this.buttonEL.classList.remove(this.hiddenClass);\n}\ndisable(){\n  this.buttonEL.disabled = true;\n}\nenable(){\n  this.buttonEL.disabled = false}\n}\n\nconst loadMoreBtnEl = new ButtonService(loadMoreBtn, \"is-hidden\");\nconsole.log(loadMoreBtnEl);\nloadMoreBtnEl.disable();\n */"],"names":["URL","API_KEY","axios","fetchImages","query","page","params","error","galleryList","renderImages","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","clearGallery","showLoader","hideLoader","loadMoreBtn","form","maxPages","event","iziToast","data","smoothScroll","cardHeight"],"mappings":"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"}